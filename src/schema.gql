# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  name: String!
  email: String!
}

type AuthType {
  user: User!
  token: String!
}

type Product {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Float!
  type: String!
}

type DigitalProduct {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Float!
  type: String!
  downloadLink: String!
}

type ConfigurableProduct {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Float!
  type: String!
  color: String!
  size: String!
}

type GroupedProduct {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Float!
  type: String!
  associatedProducts: [Product!]!
}

type SaleProduct {
  id: ID!
  product: Product!
  sale: Sale!
  quantity: Float!
  unitPrice: Float!
  totalPrice: Float!
}

type Customer {
  id: ID!
  name: String!
  cpf: String!
  email: String!
  sales: [Sale!]!
}

type Sale {
  id: ID!
  description: String!
  saleProducts: [SaleProduct!]!
  customer: Customer!
  totalValue: Float!
  date: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  getUsers: [User!]!
  getUserById(id: String!): User
  getUserByEmail(email: String!): User
  getProducts: [Product!]!
  getProductById(id: String!): Product
  getSales: [Sale!]!
  findOne(id: String!): Customer!
  findOneByCpf(cpf: String!): Customer!
  getCustomers: [Customer!]!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): Boolean!
  login(loginInput: AuthInput!): AuthType!
  createProduct(createProductInput: CreateProductInput!): Product!
  createDigitalProduct(createDigitalProductInput: CreateDigitalProductInput!): DigitalProduct!
  createConfigurableProduct(createConfigurableProductInput: CreateConfigurableProductInput!): ConfigurableProduct!
  createGroupedProduct(createGroupedProductInput: CreateGroupedProductInput!): GroupedProduct!
  updateProduct(id: String!, updateProductInput: UpdateProductInput!): Product!
  updateDigitalProduct(id: String!, updateDigitalProductInput: UpdateDigitalProductInput!): DigitalProduct!
  updateConfigurableProduct(id: String!, updateConfigurableProductInput: UpdateConfigurableProductInput!): ConfigurableProduct!
  updateGroupedProduct(id: String!, updateGroupedProductInput: UpdateGroupedProductInput!): GroupedProduct!
  removeProduct(id: String!): Boolean!
  createSale(createSaleInput: CreateSaleInput!): Sale!
  updateSale(id: String!, updateSaleInput: UpdateSaleInput!): Sale!
  removeSale(id: String!): Boolean!
  createCustomer(createCustomertInput: CreateCustomerInput!): Customer!
  updateCustomer(id: String!, updateCustomertInput: UpdateCustomerInput!): Customer!
  removeCustomer(id: String!): Boolean!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

input AuthInput {
  email: String!
  password: String!
}

input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Float!
}

input CreateDigitalProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Float!
  downloadLink: String!
}

input CreateConfigurableProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Float!
  color: String!
  size: String!
}

input CreateGroupedProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Float!
  associatedProducts: [String!]!
}

input UpdateProductInput {
  name: String
  description: String
  price: Float
  stock: Float
}

input UpdateDigitalProductInput {
  name: String
  description: String
  price: Float
  stock: Float
  downloadLink: String
}

input UpdateConfigurableProductInput {
  name: String
  description: String
  price: Float
  stock: Float
  color: String
  size: String
}

input UpdateGroupedProductInput {
  name: String
  description: String
  price: Float
  stock: Float
  associatedProducts: [String!]
}

input CreateSaleInput {
  description: String!
  saleProducts: [CreateSaleProductInput!]!
  date: DateTime!
  customerId: String!
}

input CreateSaleProductInput {
  productId: String!
  quantity: Float!
}

input UpdateSaleInput {
  description: String
  saleProducts: [UpdateSaleProductInput!]
  date: DateTime
  customerId: String
}

input UpdateSaleProductInput {
  productId: String!
  quantity: Float!
}

input CreateCustomerInput {
  name: String!
  cpf: String!
  email: String!
}

input UpdateCustomerInput {
  name: String
  email: String
}